require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe InvitationsController do
  def mock_invitation(stubs={})
    @mock_invitation ||= mock_model(Invitation, stubs).as_null_object
  end
  
  def current_user
    unless @current_user 
      @current_user ||= Factory(:user)
      @current_user.access_tokens << Factory.build(:access_token)
      @current_user.save
    end
    @current_user
  end
  
  before :each do
    sign_in :user, current_user
  end

  describe "GET index" do
    it 'should be ok' do
      Invitation.stub(:all) { [mock_invitation] }
      get :index
      response.status.should == 200
    end
    
    it "assigns all invitations as @invitations" do
      Invitation.stub(:all) { [mock_invitation] }
      get :index
      assigns(:invitations).should eq([mock_invitation])
    end
    
    it 'only returns invitations related to the current user' do
      Invitation.should_receive(:all).with(:conditions => {:inviter_id => @current_user.id})
      get :index
    end
  end

  describe "GET show" do
    it "assigns the requested invitation as @invitation" do
      Invitation.stub(:find).with("37") { mock_invitation(:inviter_id => @current_user.id) }
      get :show, :id => "37"
      assigns(:invitation).should be(mock_invitation)
    end
    
    it 'redirects if current user is not inviter' do
      Invitation.stub(:find).with("37") { mock_invitation(:inviter_id => @current_user.id + 10) }
      get :show, :id => "37"
      response.should be_redirect
    end
  end

  describe "GET new" do
    it "assigns a new invitation as @invitation" do
      Invitation.stub(:new) { mock_invitation }
      get :new
      assigns(:invitation).should be(mock_invitation)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it 'creates an invitation with the email' do
        Invitation.should_receive(:new).with('email' => 'foo@barbar.com', 'inviter_id' => @current_user.id).and_return( mock_invitation(:save => true) )
        post :create, :invitation => {'email' => 'foo@barbar.com'}
        assigns(:invitation).should be(mock_invitation)
      end
      
      it "redirects to the created invitation" do
        Invitation.stub(:new) { mock_invitation(:save => true) }
        post :create, :invitation => {}
        response.should redirect_to(invitation_url(mock_invitation))
      end
    end

    describe "with invalid params" do
      before do
        @invitation = mock_invitation
        @invitation.should_receive(:save).and_raise("We are sorry. Something went wrong")
      end
      
      it 'flashes the raised error' do
        Invitation.stub!(:new).and_return(@invitation)
        post :create, :invitation => {:foo => 'bar'}
        session[:flash][:error].should == "We are sorry. Something went wrong" 
      end
      
      it "re-renders the 'new' template" do
        Invitation.stub!(:new).and_return(@invitation)
        post :create, :invitation => {}
        response.should render_template("new")
      end
    end
  end
end
